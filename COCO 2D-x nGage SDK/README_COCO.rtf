{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green128\blue128;\red63\green127\blue127;\red127\green0\blue127;
\red42\green0\blue255;\red127\green0\blue85;\red63\green127\blue95;\red0\green0\blue192;\red0\green80\blue50;
\red38\green38\blue38;\red242\green242\blue242;\red255\green0\blue0;\red127\green159\blue191;\red63\green95\blue191;
\red127\green127\blue159;}
\margl1440\margr1440\vieww25100\viewh13140\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\f0\fs28 \cf0 nGage Coco2D-X SDK Project Integration
\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
1. Get the the latest SDK and extract the zip. Here you will find:\
\
	nGageX.cpp/h - Coco2D-x JNI nGage wrapper. \
	nGageHelper.java - The java JNI nGage wrapper that connects to nGageX.cpp/h\
	nGageSDK_Vxxx.zip - Latest Android nGage SDK which includes:\
		nGage- android resource project and includes the ngageSDK.jar  library\
		SampleApp - Sample SDK project \
\
	\
\
2. Let first start by setting up the Android side of the Android nGageSDK project library. Unzip the Android nGageSDK_Vxxx.zip. Add nGage resource to the project: -  Since Android does not allow packing resources directly into a library file you must add the nGage Android project. In eclipse, Import 'nGage' project from the SDK zip file. Go to your apps Project Properties and select Android menu item on left. On the right you will see a 'Library' section. Select the 'Add' button and find the android project 'nGage'. \
\
Note: Make sure the nGage project has a Target Android Version of 3.2 or higher. Minimum Android version can be as low as 2.1.\
\
\
3. In your apps Manifest file add the lines inside the 
\f1\fs22 \cf2 <\cf3 application> 
\f0\fs24 \cf0 tag:\
 
\f1\fs22 \cf2 <\cf3 application 
\f0\fs24 \cf0 \'85
\f1\fs22 \cf3 >
\f0\fs24 \cf0 \
\pard\pardeftab720

\f1\fs22 \cf0 	
\f0\fs24 \'85\
\

\f1\fs22 	 \cf2 <\cf3 service\cf0  \cf4 android:name\cf0 =\cf5 "org.openudid.OpenUDID_service"\cf2 >\cf0 \
			 \cf2 <\cf3 intent-filter\cf2 >\cf0 \
				\cf2 <\cf3 action\cf0  \cf4 android:name\cf0 =\cf5 "org.openudid.GETUDID"\cf2 />\cf0 \
			\cf2 </\cf3 intent-filter\cf2 >\cf0 \
	\cf2 </\cf3 service\cf2 >\

\f0\fs24 \cf0 \

\f1\fs22       \cf2 <\cf3 activity\cf0  \cf4 android:screenOrientation\cf0 =\cf5 "sensorLandscape"\cf0  \cf4 android:configChanges\cf0 =\cf5 "keyboardHidden|orientation"\cf0  \cf4 android:name\cf0 =\cf5 "com.tinidream.ngage.nGageActivity"\cf2 />\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 	\'85\
\pard\pardeftab720

\f1\fs22 \cf2 </\cf3 application\cf2 >
\f0\fs24 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural
\cf0 Also in the Manifest, add attribute 
\f1\fs22 \cf4 android:launchMode\cf0 =\cf5 "singleTask" 
\f0\fs24 \cf0 to your apps starting activity tag. \
For example, you will have something like 
\f1\fs22 \cf2 <\cf3 activity\cf5  \cf4 android:name\cf0 =\cf5 "com.company.appname.startingActivity" \'85 \cf4 android:launchMode\cf0 =\cf5 "singleTask"\cf2 />\
\

\f0\fs24 \cf0 4. Let add the Java JNI wrapper. Copy the nGageHelper.java to your Coco2D-x "proj.android/src" folder. Open you activity class and add 
\f1\fs22 nGageHelper.setActivity(\cf6 this\cf0 );
\f0\fs24  as described below.\
\pard\pardeftab720

\f1\fs22 \cf0 	\cf7 //public static Cocos2dxActivity activity;\cf0 \
	\cf6 protected\cf0  \cf6 void\cf0  onCreate(Bundle savedInstanceState)\{\
		\cf6 super\cf0 .onCreate(savedInstanceState);\
		nGageHelper.setActivity(\cf6 this\cf0 );\
	\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural

\f0\fs24 \cf0 5. Let add the Coco JNI wrapper. Copy the nGage.cpp and .h files to you Coco2D-x project. \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc
\cf0 \

\fs28 nGage Coco2D-x SDK Code Integration
\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
1. In your Coco AppDelegate.cpp class and inside function 
\f1\fs22 applicationDidFinishLaunching \
\
	 nGageX::startnGageSession(\cf5 "<Your apps nGage SDK Key"\cf0 );\

\f0\fs24 \
\
2.   When your application exits, call function 
\f1\fs22 nGageX::onDestroy()
\f0\fs24 . \
\
	
\f1\fs22 nGageX::onDestroy(); \
\
\
3. To show the nGage achievements dialog call:\
	\
	nGageX::showAchievementsDialog();\
\
\
\
\pard\pardeftab720\qc

\fs28 \cf0 Completing Actions
\fs22 \
\pard\pardeftab720
\cf0 \
To complete an action add the below line when the action requirements are completed in your app. Pass the action type as the parameter: \
\pard\pardeftab720
\cf8 	\
	\cf0 nGageX::completeAction(<actionID>);\
\
If you app requires a value like High Score as part of the actions requirements then call:\
\
\cf8 	\cf0 nGageX::completeAction(<actionID>,value);\
\
The <actionID> type is a \cf6 char\cf0 * that is assigned to an action when creating a campaign on the web portal. Make sure your Silver and Gold actions types are different in a campaign.\
\
Sample nGage Action ID's:\
\
LevelUp	: Should be called each time your user levels up\
Win		: Should be called each time your user wins\
Play		: Should be called each time your user plays a round\
Buy		: Should be called each time your user buys an item\
Use		: Should be called each time your user uses an item\
Share		: Should be called each time your user shares on a social network\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\fs28 \cf0 Receiving Rewards\

\fs22 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 1. 
\f0\fs24  In your Coco AppDelegate.cpp class and inside function 
\f1\fs22 applicationWillEnterForeground
\f0\fs24 \
\
	
\f1\fs22 nGageX::getPendingRewards(); //Calls the server to check for rewards when the app resumes.  \
\
\
2. Implement a nGageXDelegate callback class if you wish to receive your callback on the client side for reward amounts to give to users. An option of checking server side also exist if you prefer. To get rewards on the client side use the nGageX::setDelegate(nGageXDelegate *delegate) function to assign you nGageXDelete callback class. Be sure implement the callback function nGageXDelegate\cf9 ::\cf0 onReceivenGageReward. \
\
\pard\pardeftab720
\cf6 	\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 3. Once a nGageX::getPendingRewards call is made the server will return the values to the nGageXDelegate\cf9 ::\cf0 onReceivenGageReward(\cf6 int\cf0  reward,\cf6 const\cf0  \cf6 char\cf0 * serverToken) function in class nGageXDelete. A reward amount and a server token will return. If reward>0 then assign that value to the user. The server token confirmation is optional.	\
 \
\pard\pardeftab720
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc

\fs28 \cf0 \
Optional Currency Verification
\fs22 \
\pard\pardeftab720
\cf0 \
\pard\pardeftab720
\cf10 Publishers are able to verify currency claims by making a call to the following URL:\
\pard\pardeftab720
\cf10 \cb11 	http://engage.pxladdicts.com/engage/verifycurrencyclaimtoken/token/\cf12 TOKEN_FROM_SDK\cf10 \
\pard\pardeftab720
\cf10 \cb1 	Parameters:\
\pard\pardeftab720
\cf12 	TOKEN_FROM_SDK\cf10  - token is provided by the client-side SDK on every /engage/getpendingrewards call\
\
Response:\
	The API call returns JSON in the following format:\
\pard\pardeftab720
\cf10 \cb11 	\{"result": \{"token_verified": \cf12 0 or 1, i.e. is the token valid\cf10 , "claimed": \cf12 0 or 1, i.e. has the token been claimed before\cf10 , currency_amount":\cf12 AMOUNT_OF_CURRENCY_AS_AN_INTEGER\cf10 \}\}\
\pard\pardeftab720
\cf10 \cb1 \
To prevent fraud, you should give currency to the user only server-side, and only when token_verified is 1 and claimed is 0\
\pard\pardeftab720
\cf0 \
\
\
\pard\pardeftab720\qc

\fs28 \cf0 Interstitials\

\fs22 \
\pard\pardeftab720
\cf0 1.	We have incentivized and non-incentivized interstitials. You can also customize the header text. Simply pass to the show call a string you wish to show with the ad.\
\
	Non-Incentivized Intersticial: nGageX::showInterstitial() or nGageX::showInterstitial("Custom Header");\
\
	Incentivized Intersticial: nGageX::showIncentedInterstitial() ;\
\
\
2. 	If you've setup the Receive Rewards section above then you are ready to receive rewards from incentivized interstitial also. \
\
3. 	You can optionally setup a callback for informational purposes. To do so implement \cf9 nGageXInterstitialDelegate\cf0  with callback function:\
\pard\pardeftab720
\cf6 	\
	\cf9 nGageXInterstitialDelegate\cf0 ::onReceiveInterstitialInfo(\cf6 boolean\cf0  displayed, \cf6 const\cf0  \cf6 char\cf0 * errorCode); \cf6 \
\pard\pardeftab720
\cf13 	@param\cf14  displayed \cf15 -\cf14  If true then the ad was shown and errorCode will be null. If false then no inventory was available or some other server error occurred.\cf0 \
\cf14 	\cf13 @param\cf14  errorCode \cf15 -\cf14  errorCode returns a server code prompt for debugging.\cf6 \
	\cf0 \
\
\
\
\pard\pardeftab720\qc

\fs28 \cf0 Proguard (optional)
\fs22 \
\pard\pardeftab720
\cf0 If you are using proguard add the following lines to your proguard.cfg file: \
\
-\ul dontwarn\ulnone  com.tinidream.**\
-keep class com.tinidream.** \{*;\}\
\pard\pardeftab720\qc
\cf0 \
\
\
\pard\pardeftab720
\cf0 If you still having issues contact your representative with specific questions and we'll be happy to help. \
\
Thank you for integrating the nGage COCO2D-X SDK! \
\
\
\
\
\pard\pardeftab720\qr
\cf0 j\
}